# Section: influxdb service
apiVersion: v1
kind: Service
metadata:
  namespace: monitoring
  name: influxdb
  labels:
    component: influxdb
    app: influxdb
spec:
  clusterIP: None
  ports:
  - port: 8086
    name: server
  - port: 8082
    name: flux
  selector:
    component: influxdb
  publishNotReadyAddresses: true
---
# Section: influxdb statefulset
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: monitoring
  name: influxdb
  labels:
    component: influxdb
    app: influxdb
spec:
  serviceName: influxdb
  selector:
    matchLabels:
      component: influxdb
  replicas: 1
  template:
    metadata:
      name: influxdb
      labels:
        component: influxdb
        app: influxdb
    spec:
      containers:
      - name: influxdb
        image: quay.io/influxdb/influxdb:nightly
        lifecycle:
          postStart:
            exec:
              command:
                - /bin/sh
                - "-c"
                - until curl -s http://localhost:8086/ping; do sleep 1; done; influx -execute "CREATE DATABASE \"${MONITOR_DATABASE}\" WITH DURATION 30d NAME ${MONITOR_RP}" || true
        env:
          - name: INFLUXDB_IFQL_ENABLED
            value: "true"
          - name: INFLUXDB_DATA_INDEX_VERSION
            value: "tsi1"
          - name: INFLUXDB_HTTP_FLUX_ENABLED
            value: "true"
          - name: INFLUXDB_LOGGING_LEVEL
            value: "error"
          - name: INFLUXDB_HTTP_LOG_ENABLED
            value: "false"
          - name: MONITOR_RP
            value: "monthly"
          - name: MONITOR_DATABASE
            value: "monitor"
        volumeMounts:
          - name: data
            mountPath: /var/lib/influxdb
        ports:
          - containerPort: 8086
            name: server
          - containerPort: 8082
            name: flux
  volumeClaimTemplates:
  - metadata:
      namespace: monitoring
      name: data
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: 10Gi
---
---
# Section: chronograf configmap
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: monitoring
  name: chronograf
  labels:
    app: chronograf
    component: chronograf
data:
  monitor.src: |-
    {
      "id": "5000",
      "name": "internal",
      "url": "http://{{ .INFLUXDB_SERVICE_HOST }}:{{ .INFLUXDB_SERVICE_PORT}}",
      "type": "influx",
      "insecureSkipVerify": false,
      "default": true,
      "telegraf": "cloud",
      "organization": "influx"
    }
---
# Section: chronograf service
apiVersion: v1
kind: Service
metadata:
  namespace: monitoring
  name: chronograf
spec:
  ports:
  - port: 80
    targetPort: 8888
    name: server
  selector:
    app: chronograf
---
# Section: chronograf deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: monitoring
  name: chronograf
  labels:
    app: chronograf
    component: chronograf
spec:
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app: chronograf
  replicas: 1
  template:
    metadata:
      name: chronograf
      labels:
        app: chronograf
        component: chronograf
    spec:
      containers:
      - name: chronograf
        image:  quay.io/influxdb/chronograf:1.7.1
        env:
          - name: RESOURCES_PATH
            value: "/usr/share/chronograf/resources"
          - name: LOG_LEVEL
            value: "error"
        ports:
          - containerPort: 8888
            name: server
        volumeMounts:
          - name: data
            mountPath: /var/lib/chronograf
          - name: config
            mountPath: /usr/share/chronograf/resources
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: chronograf
      - name: config
        configMap:
          name: chronograf
---
# Section: chronograf service
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: monitoring
  name: chronograf
  labels:
    app: chronograf
    component: chronograf
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: 1Gi
---
# Section: telegraf Daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ebpf
  namespace: monitoring
  labels:
    app: ebpf
    component: ebpf
spec:
  selector:
    matchLabels:
      name: ebpf
  template:
    metadata:
      labels:
        name: ebpf
    spec:
      initContainers:
      - name: init-influxdb
        image: busybox:glibc
        command: ['sh', '-c', 'until wget -q $MONITOR_HOST/ping; do echo waiting for InfluxDB at $MONITOR_HOST; sleep 2; done;']
        env:
        - name: MONITOR_HOST
          value: "http://influxdb.monitoring.svc:8086"
      containers:
      - name: ebpf-execve
        image: quay.io/fntlnz/influxdb-ebpf-example:feature-execve
        securityContext:
          privileged: true
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 500m
            memory: 500Mi
        env:
        - name: MONITOR_HOST
          value: "http://influxdb.monitoring.svc:8086"
        - name: MONITOR_RP
          value: "monthly"
        - name: MONITOR_DATABASE
          value: "monitor"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: libmodules
          mountPath: /lib/modules
          readOnly: true
      - name: ebpf-bashreadline
        image: quay.io/fntlnz/influxdb-ebpf-example:master
        securityContext:
          privileged: true
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 500m
            memory: 500Mi
        env:
        - name: MONITOR_HOST
          value: "http://influxdb.monitoring.svc:8086"
        - name: MONITOR_RP
          value: "monthly"
        - name: MONITOR_DATABASE
          value: "monitor"
        - name: URETPROBE_BINARY
          value: "/lib/libreadline.so.7.0"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: readlinelib
          mountPath: /lib/libreadline.so.7.0
          readOnly: true
        - name: libmodules
          mountPath: /lib/modules
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: sys
        hostPath:
          path: /sys
      - name: readlinelib
        hostPath:
          path: /lib/libreadline.so.7.0
      - name: libmodules
        hostPath:
          path: /lib/modules
---
# Section: kapacitor
apiVersion: v1
kind: Service
metadata:
  namespace: monitoring
  name: kapacitor
spec:
  ports:
  - port: 9092
    name: backend
  selector:
    app: kapacitor
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: monitoring
  name: kapacitor
  labels:
    app: kapacitor
spec:
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app: kapacitor
  replicas: 1
  template:
    metadata:
      name: kapacitor
      labels:
        app: kapacitor
    spec:
      containers:
      - name: kapacitor
        image: docker.io/kapacitor:1.5
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 500Mi
        env:
          - name: KAPACITOR_HOSTNAME
            value: kapacitor.monitoring.svc.cluster.local
          - name: KAPACITOR_LOGGING_LEVEL
            value: INFO
          - name: KAPACITOR_REPORTING_ENABLED
            value: "false"
          - name: KAPACITOR_INFLUXDB_0_URLS_0
            value: http://influxdb.monitoring.svc.cluster.local:8086
        ports:
          - containerPort: 9092
        volumeMounts:
          - name: data
            mountPath: /var/lib/kapacitor
          - name: kapacitor-monitoring-config
            mountPath: "/etc/kapacitor"
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: kapacitor
      - name: kapacitor-monitoring-config
        configMap:
          name: kapacitor-monitoring-config
          defaultMode: 420
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: monitoring
  name: kapacitor
  labels:
    app: kapacitor
spec:
  storageClassName: ebs-1
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kapacitor-monitoring-config
  namespace: monitoring
data:
  kapacitor.conf: |
    hostname = "kapacitor.monitoring.svc.cluster.local"
    data_dir = "/var/lib/kapacitor"
    [replay]
      dir = "/var/lib/kapacitor/replay"
    [storage]
      boltdb = "/var/lib/kapacitor/kapacitor.db"
    [load]
      enabled = true
      dir="/opt/kapacitor"
    [logging]
      file = "STDOUT"
      level = "ERROR"
    [[influxdb]]
      enabled = true
      default = true
      name = "monitoring"
      urls = ["http://influxdb.monitoring.svc.cluster.local:8086"]
      timeout = 0
      startup-timeout = "5m"
      [influxdb.subscriptions]
        monitor = ["monthly"]
# vim:set et sw=2 foldmethod=expr foldexpr=getline(v\:lnum)=~'^#\ Section\:'?'>1'\:getline(v\:lnum)=~#'^fu'?'a1'\:getline(v\:lnum)=~#'^endf'?'s1'\:'=':
